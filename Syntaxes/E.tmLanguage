<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>eexpr</string>
		<string>emaker</string>
		<string>e</string>
		<string>e-awt</string>
		<string>e-swt</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(\{[\s?&gt;]*(//.*)?$|^\s*// \{\{\{)</string>
	<key>foldingStopMarker</key>
	<string>^[\s?&gt;]*(\}|// \}\}\}$)</string>
	<key>keyEquivalent</key>
	<string>^~E</string>
	<key>name</key>
	<string>E</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>source.updoc</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#docComment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#blockExpr</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#quasiLiteral</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#guard</string>
		</dict>
		<dict>
			<key>match</key>
			<string>0[Xx][0-9A-Fa-f]+|[0-9]+(?:\.[0-9]+)?(?:[Ee][+-]?.[0-9]+)?</string>
			<key>name</key>
			<string>constant.number.e</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>meta.expr.list-or-map.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[])}"`'0-9a-zA-Z_&gt;])\s*((\.|&lt;-)\s*(?!\.)(\w+|"\w+")?)?\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.e</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.other.selector.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.expr.call-or-send.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#commaExprs</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>must be after call-or-send</string>
			<key>include</key>
			<string>#parenExpr</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>&lt;(\b(file|fileURL|jar|http|ftp|gopher|news|cap|captp|unsafe|awt|swing|swt)|[a-zA-Z][a-zA-Z0-9+.-]*):</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.partial.uri-scheme.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.variable.privileged.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&gt;</string>
			<key>name</key>
			<string>string.quasi.uri.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[^a-zA-Z_0-9;/?:@&amp;=+$,.!~*'()%\|#-]+</string>
					<key>name</key>
					<string>invalid.illegal.e</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.partial.uri-scheme.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.variable.privileged.e</string>
				</dict>
			</dict>
			<key>match</key>
			<string>&lt;(\b(file|fileURL|jar|http|ftp|gopher|news|cap|captp|unsafe|awt|swing|swt)|[a-zA-Z][a-zA-Z0-9+.-]*)&gt;</string>
			<key>name</key>
			<string>meta.expr.uri-scheme.e</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(def|bind|var)\s*(\b\w+|(?:::)?"[^\\"]*(?:\\.[^\\"]*)*")(?:\s+(extends)([^\n]*?))?(?:\s+(as)([^\n]*?))?(?:\s+(implements)([^\n]*?))?\s*(?={)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.def.object.e</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.other.e</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.other.e</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>keyword.other.e</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.methods.e</string>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.expr.def-object.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#openHalfMethodicalBody</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(def|bind|var)\s*(\b\w+)\s+match([^\n]*?){</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.def.object.e</string>
				</dict>
				<key>3</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.expr.def-plumbing.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(def|bind|var)\s*(\b\w+|(?:::)?"[^\\"]*(?:\\.[^\\"]*)*")\s*(?:\.\s*(\w+)\s*)?\((.*?)\)\s*(:.+?)?(\s*\b(as)\b(.+?))?(\s*\b(implements)\b(.+?))?\s*{</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.def.function.e</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.other.selector.e</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>keyword.other.e</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>keyword.other.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.expr.def-function.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(fn)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.expr.fn.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#openHalfBlock</string>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?={)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.e</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(def|bind|var)\s+(\b\w+)\b(?=\s*([],;#)]|$))</string>
			<key>name</key>
			<string>meta.expr.def-forward.e</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(def|bind|var)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>:=</string>
			<key>name</key>
			<string>meta.expr.def-val-left.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(if)\s*\((.+?)\)\s*{</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.expr.if.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(switch)\s*\((.+?)\)\s*{</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.expr.switch.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#matcher</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>[=!]~</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[)},\n])</string>
			<key>name</key>
			<string>meta.expr.match-bind-right.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;=&gt;|&lt;=?|&gt;=?|==|=&gt;|\.\.!?|!=|!|//?=?|\+[+=]?|-[-=]?|\*\*?=?|%%?=?|\^=?|\|[\|=]?|&amp;[&amp;!=]?|;|:=|::</string>
			<key>name</key>
			<string>keyword.operator.e</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.selector.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.quoted.double.e</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\b\w+|("[^\\"]*(\\.[^\\"]*)*"))=</string>
			<key>name</key>
			<string>keyword.operator.e</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>must be after "verb"= operator rule</string>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(accum|break|catch|continue|else|escape|finally|for|return|switch|thunk|try|when|while)\b</string>
			<key>name</key>
			<string>keyword.control.e</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(extends|guards|as|implements|in|interface|_)\b</string>
			<key>name</key>
			<string>keyword.other.e</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(pragma)\s*.\s*(enable|disable|warn|syntax)\s*\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.pragma.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>match</key>
					<string>.+</string>
					<key>name</key>
					<string>invalid.illegal.e</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(pragma|bind|var|match|method|to|exit)\b|\$|@</string>
			<key>name</key>
			<string>invalid.illegal.wrong-scope.e</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(null|false|true|throw|__loop|__makeList|__makeMap|__makeProtocolDesc|__makeMessageDesc|__makeParamDesc|any|void|boolean|__makeOrderedSpace|ValueGuard|__MatchContext|require|__makeVerbFacet|NaN|Infinity|__identityFunc|__makeInt|__makeFinalSlot|__makeVarSlot|__makeGuardedSlot|__makeGuard|__makeTwine|__makeSourceSpan|__auditedBy|Guard|near|pbc|PassByCopy|DeepPassByCopy|Data|Persistent|DeepFrozen|int|float64|char|String|Twine|TextWriter|List|Map|nullOk|Tuple|__Portrayal|notNull|vow|rcvr|SturdyRef|simple__quasiParser|twine__quasiParser|rx__quasiParser|e__quasiParser|epatt__quasiParser|sml__quasiParser|term__quasiParser|simple`|twine`|rx`|e`|epatt`|sml`|term`|traceln|__equalizer|__comparer|Ref|E|promiseAllFulfilled|EIO|help|safeScope|__eval|resource__uriGetter|type__uriGetter|import__uriGetter|elib__uriGetter|elang__uriGetter|opaque__uriGetter)\b</string>
			<key>name</key>
			<string>support.variable.e</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(file__uriGetter|fileURL__uriGetter|jar__uriGetter|http__uriGetter|ftp__uriGetter|gopher__uriGetter|news__uriGetter|cap__uriGetter|makeCommand|stdout|stderr|stdin|print|println|interp|entropy|timer|introducer|identityMgr|makeSturdyRef|timeMachine|unsafe__uriGetter|currentVat|rune|awt__uriGetter|swing__uriGetter|JPanel__quasiParser|JPanel`|swt__uriGetter|currentDisplay|swtGrid__quasiParser|swtGrid`|privilegedScope)\b</string>
			<key>name</key>
			<string>support.variable.privileged.e</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#reserved</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[a-zA-Z_][a-zA-Z0-9_]*</string>
			<key>name</key>
			<string>variable.other.e</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>line continuations</string>
			<key>match</key>
			<string>\\</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>operators not allowed as expressions or caught above when in proper context</string>
			<key>match</key>
			<string>\?|-&gt;|&lt;-</string>
			<key>name</key>
			<string>invalid.illegal.wrong-scope.e</string>
		</dict>
		<dict>
			<key>match</key>
			<string>=</string>
			<key>name</key>
			<string>invalid.illegal.e</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>blockExpr</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.expr.block.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>commaExprs</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>keyword.other.e</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>begin</key>
			<string>(#)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>comment.line.number-sign.e</string>
		</dict>
		<key>docComment</key>
		<dict>
			<key>begin</key>
			<string>(^\s*)?/\*\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/(\s*\n)?</string>
			<key>name</key>
			<string>comment.block.documentation.e</string>
		</dict>
		<key>guard</key>
		<dict>
			<key>begin</key>
			<string>:(?![:=])</string>
			<key>contentName</key>
			<string>entity.name.type</string>
			<key>end</key>
			<string>(?=[, {\)}\n]|\bexit\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>matcher</key>
		<dict>
			<key>begin</key>
			<string>\b(match)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>meta.matcher.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pattern</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>openHalfBlock</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>(?=})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>openHalfMethodicalBody</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>(?=})</string>
			<key>name</key>
			<string>meta.methods.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#docComment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#matcher</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(to|method)\s+(\w+|"[^\\"]*(\\.[^\\"]*)*")</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.e</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.selector.e</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>name</key>
					<string>meta.method.e</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>end</key>
							<string>\)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#pattern</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\)) *:(?!\s*{)</string>
							<key>end</key>
							<string>(?={)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#openHalfBlock</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\S+</string>
							<key>name</key>
							<string>invalid.illegal.e</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>updoc continuations</string>
					<key>match</key>
					<string>^\s*&gt;</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\S+</string>
					<key>name</key>
					<string>invalid.illegal.e</string>
				</dict>
			</array>
		</dict>
		<key>parenExpr</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.expr.parens1.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[^\s]+</string>
					<key>name</key>
					<string>invalid.illegal.e</string>
				</dict>
			</array>
		</dict>
		<key>parenExprs</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.expr.parensN.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#commaExprs</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[^\s]+</string>
					<key>name</key>
					<string>invalid.illegal.e</string>
				</dict>
			</array>
		</dict>
		<key>pattern</key>
		<dict>
			<key>name</key>
			<string>meta.pattern.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#quasiLiteral</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(bind|var)\b|&amp;</string>
					<key>name</key>
					<string>storage.modifier.e</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(:=)\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.e</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[, {\)}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#guard</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\?)\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.e</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>source.e</string>
					<key>end</key>
					<string>(?=[, {\)}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(exit)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.e</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>actually only applies to define-exprs, but this is easy to do</string>
					<key>contentName</key>
					<string>source.e</string>
					<key>end</key>
					<string>(?=[,{\)}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(==)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.e</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>source.e</string>
					<key>end</key>
					<string>(?=[, {\)}])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\bvia\b)\s*\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.e</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>source.e</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#reserved</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[a-zA-Z_][a-zA-Z0-9_]*</string>
					<key>name</key>
					<string>variable.parameter.e</string>
				</dict>
			</array>
		</dict>
		<key>quasiLiteral</key>
		<dict>
			<key>begin</key>
			<string>(\b([a-zA-Z_][a-zA-Z0-9_]*)|)`</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.partial.quasi-parser.e</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>name</key>
			<string>string.quasi.literal.e</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\$\\(.|$)|\$\$|@@|``</string>
					<key>name</key>
					<string>constant.character.escape.quasi.e</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.e</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\$([a-zA-Z_][a-zA-Z0-9_]*)</string>
					<key>name</key>
					<string>string.unquoted</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.e</string>
						</dict>
					</dict>
					<key>match</key>
					<string>@([a-zA-Z_][a-zA-Z0-9_]*)</string>
					<key>name</key>
					<string>string.unquoted</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\${</string>
					<key>end</key>
					<string>}</string>
					<key>name</key>
					<string>string.unquoted</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>@{</string>
					<key>end</key>
					<string>}</string>
					<key>name</key>
					<string>string.unquoted</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#pattern</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\$</string>
					<key>name</key>
					<string>invalid.illegal.e</string>
				</dict>
			</array>
		</dict>
		<key>reserved</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(abstract|an|as|assert|attribute|be|begin|behalf|belief|believe|believes|case|class|const|constructor|declare|default|define|defmacro|delicate|deprecated|dispatch|do|encapsulate|encapsulated|encapsulates|end|ensure|enum|eventual|eventually|export|facet|forall|function|given|hidden|hides|inline|is|know|knows|lambda|let|methods|module|namespace|native|obeys|octet|oneway|operator|package|private|protected|public|raises|reliance|reliant|relies|rely|reveal|sake|signed|static|struct|suchthat|supports|suspect|suspects|synchronized|this|transient|truncatable|typedef|unsigned|unum|uses|using|utf8|utf16|virtual|volatile|wstring)\b</string>
					<key>name</key>
					<string>invalid.illegal.reserved-keyword.e</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.e</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.e</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.e</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.e</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.e</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.e</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.e</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.e</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.e</string>
	<key>uuid</key>
	<string>A47B7209-606B-47B0-9AFA-1899041FFAD7</string>
</dict>
</plist>
